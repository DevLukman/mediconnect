// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum DoctorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String
  role          Role
  emailVerified Boolean        @default(false)
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  notifications Notification[]
  patient       Patient?
  doctor        Doctor?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Patient {
  id           String        @id @default(cuid())
  userId       String
  bloodType    String
  gender       String
  genotype     String
  birthDate    String
  occupation   String
  phone        String
  address      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  timezone     String        @default("Africa/Lagos")
  country      String
  appointments Appointment[]
  reviews      Review[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Doctor {
  id                String        @id @default(cuid())
  userId            String
  specialty         String
  yearsOfExperience Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  startTime         String
  endTime           String
  consultationFee   Int
  bio               String        @db.Text
  timezone          String        @default("Africa/Lagos")
  country           String?       @default("Nigeria")
  status            DoctorStatus  @default(PENDING)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments      Appointment[]
  reviews           Review[]

  @@unique([userId])
  @@index([userId])
  @@index([specialty])
  @@index([status])
}

model Appointment {
  id              String            @id @default(cuid())
  patientId       String
  doctorId        String
  status          AppointmentStatus @default(PENDING)
  review          Review?
  reasonForVisit  String
  startTime       String
  endTime         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  appointmentDate DateTime          @db.Date
  patient         Patient           @relation(fields: [patientId], references: [id])
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  payment         Payment?
  notification    Notification[]

  @@index([patientId])
  @@index([doctorId])
  @@index([appointmentDate])
  @@index([status])
  @@index([doctorId, appointmentDate, startTime])
}

model Payment {
  id              String        @id @default(cuid())
  appointmentId   String        @unique
  appointment     Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  amount          Decimal       @db.Decimal(10, 2)
  currency        String
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?       @unique
  stripeSessionId String?       @unique
  paymentMethod   String?
  paidAt          DateTime?
  refundedAt      DateTime?
  refundReason    String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt

  @@index([appointmentId])
  @@index([stripePaymentId])
}

model Notification {
  id                   String      @id @default(cuid())
  userId               String
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment          Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  isRead               Boolean     @default(false)
  readAt               DateTime?
  createdAt            DateTime    @default(now())
  appointmentId        String
  appointmentStartTime String
  appointmentEndTime   String
  message              String

  @@index([userId, isRead])
  @@index([createdAt])
}

model Review {
  id             String      @id @default(cuid())
  appointmentId  String      @unique
  appointment    Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patientId      String
  patient        Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId       String
  doctor         Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  rating         Int         @db.SmallInt
  comment        String?     @db.Text
  doctorResponse String?     @db.Text
  respondedAt    DateTime?
  isPublic       Boolean     @default(true)
  isFlagged      Boolean     @default(false)
  flagReason     String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now()) @updatedAt

  @@index([doctorId])
  @@index([patientId])
  @@index([rating])
  @@index([createdAt])
}
